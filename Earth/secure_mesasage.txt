CLI command:
Command output: db.sqlite3 earth_web manage.py secure_message user_flag.txt from django.contrib import admin # Register your models here. from django.apps import AppConfig class SecureMessageConfig(AppConfig): default_auto_field = 'django.db.models.BigAutoField' name = 'secure_message' import re from ipaddress import ip_address from django import forms from django.forms import ModelForm from django.core.exceptions import ValidationError from .models import EncryptedMessage class MessageForm(ModelForm): message_key = forms.CharField(max_length=50) class Meta: model = EncryptedMessage fields = ['message'] class CLICommandField(forms.CharField): def validate(self, value): super().validate(value) for potential_ip in re.findall(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}', value): try: ip_address(potential_ip) except: pass else: raise ValidationError('Remote connections are forbidden.') class CLIForm(forms.Form): cli_command = CLICommandField(label='CLI command', max_length=100) from django.db import models # Create your models here. class EncryptedMessage(models.Model): message = models.TextField(max_length=500) def __str__(self): return self.message from django.test import TestCase # Create your tests here. from django.urls import path from django.contrib.auth import views as admin_views from . import views urlpatterns = [ path('', views.index, name='index'), path('admin/', views.admin, name='admin'), path('admin/login', admin_views.LoginView.as_view(), name='login'), path('admin/logout', admin_views.LogoutView.as_view(), name='logout'), ] from django.shortcuts import render # Create your views here. from django.http import HttpResponse from .models import EncryptedMessage from .forms import MessageForm, CLIForm import subprocess def index(request): if request.method == 'POST': form = MessageForm(request.POST) if form.is_valid(): encrypted_text = xor_cipher_hex(request.POST['message'], request.POST['message_key']) EncryptedMessage.objects.create(message=encrypted_text) else: form = MessageForm() return render(request, 'secure_message/index.html', {'form': form, 'previous_messages': EncryptedMessage.objects.order_by('-id')}) def admin(request): cmd_output = '' if request.method == 'POST': form = CLIForm(request.POST) if form.is_valid(): cmd_output = subprocess.run(request.POST['cli_command'], capture_output=True, text=True, shell=True).stdout else: form = CLIForm() return render(request, 'secure_message/admin.html', {'form': form, 'cmd_output': cmd_output}) def xor_cipher_hex(text, key): result = '' for i in range(len(text)): result += chr(ord(text[i]) ^ ord(key[i % len(key)])) return result.encode('utf-8').hex() 